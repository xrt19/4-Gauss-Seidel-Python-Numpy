# -*- coding: utf-8 -*-
"""session 2 - gauss seidel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eg75yiZhjB9eri9hiDCrn0lPp5HCWZlo
"""

print("Session 2 - Gauss Seidel\n")

import numpy as np

def gauss_seidel(x, y):
  print(f"A: {x}, y = {y}")

  x = np.array(x)
  y = np.array(y)

  # 1. Check diagonally dominant
  main1_abs = np.diag(np.abs(x))
  main1_non_abs = np.diag(x)
  non_main = np.sum(np.abs(x), axis = 1) - main1_abs

  if not np.all(main1_abs > non_main):
    return 0

  # 2. Move Expression
  x = -x

  # 3. Initialize old equation variable
  old = np.zeros(x[0].shape)

  # 4. Initialize  initial value
  np.fill_diagonal(x, 0)

  # 5. Do iteration
  for i in range(15):
    new = np.array(old)

    for j, row in enumerate(x):
      new[j] = (y[j] + np.dot(new, row)) / main1_non_abs[j]

    print(f"iter-{i + 1}: {new}")

    # 6. Check the Euclidean factor
    tmp = new - old
    tmp = np.dot(tmp, tmp)
    tmp = np.sqrt(tmp)

    # 7. If the condition is achieved, stop the iteration
    if tmp < 0.022:
      print(f"\nfinal: {new}")
      return 1

    # 8. If the condition is not achieved, iterate again
    old = new

  return 0


# main

Xs = [
    [
      [4, 2, -1],
      [1, -5, 2],
      [2, -1, -4]
    ],
    [
      [3, 4, 5],
      [-3, 7, -4],
      [1, -4, -2]
    ],
    [
      [9, -2, 3, 2],
      [2, 8, -2, 3],
      [-3, 2, 11, -4],
      [-2, 3, 2, 10]
    ]
]
Ys = [
    [41, -10, 1],
    [34, -32, 62],
    [55, -14, 12, -21]
]

for i in range(3):
  result = gauss_seidel(Xs[i], Ys[i])
  if result != 1:
    print("not diagonally dominant")
  else:
    print("convergen")
  print("")